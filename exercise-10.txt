### Exercise 10 (Workshop Challenge)

* Create a data model representing a Hotel with Floors and Rooms :hotel:
* This model should provide answers to the following questions:
  * The list of Rooms available for rent on a specific date
  * The list of Rooms which can be occupied by at least 3 people on a specific date
  * The amount of unrentable Rooms (janitor closets, public laundry room, gym, etc.)
  * The amount of Rooms having a private Kitchen
  * The average amount of windows per Floor
  * The amount of Floors having Rooms with carpets
  

  mysql> create table rooms(id int auto_increment primary key, floor int, number_windows int, carpet tinyint, kitchen tinyint, rentable tinyint, max_occupancy int);
Query OK, 0 rows affected (0.01 sec)

// INSERT VALUES INTO ROOM TABLE
mysql> insert into rooms values(null, 1, 2, 1, 0, 1, 2), (null, 1, 4, 0, 1, 1, 4), (null, 1, 3, 1, 1, 1, 3);             
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> insert into rooms values(null, 2, 2, 1, 0, 1, 2), (null, 2, 4, 0, 1, 1, 4), (null, 2, 3, 1, 1, 1, 3);             
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> insert into rooms values(null, 3, 4, 1, 0, 1, 4), (null, 3, 4, 1, 1, 1, 4), (null, 3, 3, 1, 1, 1, 4);            
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> insert into rooms values(null, 4, 3, 1, 1, 1, 4), (null, 4, 3, 1, 1, 1, 4), (null, 4, 2, 1, 1, 1, 2);            
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0
  
mysql> select * from rooms;
+----+-------+----------------+--------+---------+----------+---------------+
| id | floor | number_windows | carpet | kitchen | rentable | max_occupancy |
+----+-------+----------------+--------+---------+----------+---------------+
|  1 |     1 |              2 |      1 |       0 |        1 |             2 |
|  2 |     1 |              4 |      0 |       1 |        1 |             4 |
|  3 |     1 |              3 |      1 |       1 |        1 |             3 |
|  4 |     2 |              2 |      1 |       0 |        1 |             2 |
|  5 |     2 |              4 |      0 |       1 |        1 |             4 |
|  6 |     2 |              3 |      1 |       1 |        1 |             3 |
|  7 |     3 |              4 |      1 |       0 |        1 |             4 |
|  8 |     3 |              4 |      1 |       1 |        1 |             4 |
|  9 |     3 |              3 |      1 |       1 |        1 |             4 |
| 10 |     4 |              3 |      1 |       1 |        1 |             4 |
| 11 |     4 |              3 |      1 |       1 |        1 |             4 |
| 12 |     4 |              2 |      1 |       1 |        1 |             2 |
| 13 |     2 |              3 |      1 |       1 |        0 |             4 |
| 14 |     3 |              3 |      1 |       1 |        0 |             4 |
| 15 |     4 |              2 |      1 |       1 |        0 |             2 |
+----+-------+----------------+--------+---------+----------+---------------+
15 rows in set (0.00 sec)
  
//CREATE RESERVATIONS TABLE
mysql> create table reservations(id int auto_increment primary key, room_id int, checkin date, checkout date, name varchar(30));
Query OK, 0 rows affected (0.00 sec)

mysql> insert into reservations values(null, 3, "2017-01-01", "2017-01-08", "Randy"), (null, 6, "2016-12-24","2017-01-01", "Nathan"), (null, 7, "2017-01-20", "2017-01-31", "Tony"),(null, 8, "2017-02-02", "2017-02-10", "Alice"),(null, 2, "2017-01-27"," 2017-02-01", "Candy");
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from reservations;
+----+---------+------------+------------+--------+
| id | room_id | checkin    | checkout   | name   |
+----+---------+------------+------------+--------+
|  1 |       3 | 2017-01-01 | 2017-01-08 | Randy  |
|  2 |       6 | 2016-12-24 | 2017-01-01 | Nathan |
|  3 |       7 | 2017-01-20 | 2017-01-31 | Tony   |
|  4 |       8 | 2017-02-02 | 2017-02-10 | Alice  |
|  5 |       2 | 2017-01-27 | 2017-02-01 | Candy  |
+----+---------+------------+------------+--------+
5 rows in set (0.00 sec)

 * The list of Rooms available for rent on a specific date
 
mysql> SELECT 
    ->     ro.id as `Room_ID`,
    ->     re.checkin as `CheckIn`,
    ->     re.checkout as `CheckOut`
    -> 
    -> FROM 
    ->     rooms as ro
    -> LEFT JOIN 
    ->     reservations as re
    -> ON
    ->     ro.id = re.room_id
    -> WHERE
    -> (
    ->     "2017-01-05" not between re.checkin and re.checkout
    -> AND
    ->     "2017-01-08" not between re.checkin and re.checkout
    -> )
    -> OR 
    ->     re.checkin is NULL
    -> ;
+---------+------------+------------+
| Room_ID | CheckIn    | CheckOut   |
+---------+------------+------------+
|       1 | NULL       | NULL       |
|       2 | 2017-01-27 | 2017-02-01 |
|       4 | NULL       | NULL       |
|       5 | NULL       | NULL       |
|       6 | 2016-12-24 | 2017-01-01 |
|       7 | 2017-01-20 | 2017-01-31 |
|       8 | 2017-02-02 | 2017-02-10 |
|       9 | NULL       | NULL       |
|      10 | NULL       | NULL       |
|      11 | NULL       | NULL       |
|      12 | NULL       | NULL       |
|      13 | NULL       | NULL       |
|      14 | NULL       | NULL       |
|      15 | NULL       | NULL       |
+---------+------------+------------+
14 rows in set (0.00 sec)
 
  * The list of Rooms which can be occupied by at least 3 people on a specific date
  
mysql> SELECT      ro.id as `Room_ID`,     re.checkin as `CheckIn`,     re.checkout as `CheckOut`,     ro.max_occupancy     FROM      rooms as ro     LEFT JOIN      reservations as re     ON     ro.id = re.room_id     WHERE         ( (     "2017-01-05" not between re.checkin and re.checkout     AND     "2017-01-08" not between re.checkin and re.checkout     )  OR    re.checkin IS NULL) AND ro.max_occupancy >2;
+---------+------------+------------+---------------+
| Room_ID | CheckIn    | CheckOut   | max_occupancy |
+---------+------------+------------+---------------+
|       2 | 2017-01-27 | 2017-02-01 |             4 |
|       5 | NULL       | NULL       |             4 |
|       6 | 2016-12-24 | 2017-01-01 |             3 |
|       7 | 2017-01-20 | 2017-01-31 |             4 |
|       8 | 2017-02-02 | 2017-02-10 |             4 |
|       9 | NULL       | NULL       |             4 |
|      10 | NULL       | NULL       |             4 |
|      11 | NULL       | NULL       |             4 |
|      13 | NULL       | NULL       |             4 |
|      14 | NULL       | NULL       |             4 |
+---------+------------+------------+---------------+
10 rows in set (0.00 sec)
  
  * The amount of unrentable Rooms (janitor closets, public laundry room, gym, etc.)
  
mysql> select count(rooms.id) from rooms where rentable =0;
+-----------------+
| count(rooms.id) |
+-----------------+
|               3 |
+-----------------+
1 row in set (0.00 sec)0;
  
  * The amount of Rooms having a private Kitchen
  
  mysql> select count(rooms.id) from rooms where kitchen = 1;
+-----------------+
| count(rooms.id) |
+-----------------+
|              12 |
+-----------------+
1 row in set (0.00 sec)


  * The average amount of windows per Floor
  
  FIRST FLOOR
mysql> select avg(number_windows) from rooms where rooms.floor =1;
+---------------------+
| avg(number_windows) |
+---------------------+
|              3.0000 |
+---------------------+
1 row in set (0.00 sec)

SECOND FLOOR

mysql> select avg(number_windows) from rooms where rooms.floor =2;
+---------------------+
| avg(number_windows) |
+---------------------+
|              3.0000 |
+---------------------+
1 row in set (0.00 sec)

THIRD FLOOR
mysql> select avg(number_windows) from rooms where rooms.floor =3;
+---------------------+
| avg(number_windows) |
+---------------------+
|              3.5000 |
+---------------------+
1 row in set (0.00 sec)

FOURTH FLOOR

mysql> select avg(number_windows) from rooms where rooms.floor =4;
+---------------------+
| avg(number_windows) |
+---------------------+
|              2.5000 |
+---------------------+
1 row in set (0.00 sec)



  
  
  
  * The amount of Floors having Rooms with carpets
  
  
mysql> select count(rooms.floor) from rooms where carpet = 1;
+--------------------+
| count(rooms.floor) |
+--------------------+
|                 13 |
+--------------------+
1 row in set (0.00 sec)